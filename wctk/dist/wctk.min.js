class t{#t=!1;#e;#n=[];constructor(t,e){this.#e=t;for(let[t,n]of e){let e=n;e instanceof Function&&!e.hasOwnProperty("prototype")&&(e=e.bind(this.#e)),this.#n.push([t,e])}}connect(){if(!this.#t){this.#t=!0;for(let[t,e]of this.#n)this.#e.addEventListener(t,e)}}disconnect(){if(this.#t){this.#t=!1;for(let[t,e]of this.#n)this.#e.removeEventListener(t,e)}}}class e{#e;#s=!1;constructor(t){this.#e=t}get queued(){return this.#s}render(){this.#s||(this.#s=!0,queueMicrotask((()=>{this.#s=!1,this.#e.render()})))}}class n{#o;#c;constructor(t,e){this.#o=t.attachInternals(),this.#c=null!==this.#o.shadowRoot,this.#c||t.attachShadow(e)}get internals(){return this.#o}get declarative(){return this.#c}get shadowRoot(){return this.#o.shadowRoot}}class s{#i;constructor(t,e){this.#i=t,this.#i.adoptedStyleSheets=o(e)}get adoptedStyleSheets(){return this.#i.adoptedStyleSheets}set adoptedStyleSheets(t){this.#i.adoptedStyleSheets=o(t)}}function o(t){let e=[];for(let n of t)if(n instanceof CSSStyleSheet&&e.push(n),"string"==typeof n){const t=new CSSStyleSheet;t.replaceSync(n),e.push(t)}return e}class c{#t=!1;#e;#h;#r;#l;constructor(t,e,n){this.#e=t,this.#r=e,this.#l=n}connect(){this.#t||(this.#t=!0,this.#h=this.#r(this.#e))}disconnect(){this.#t&&(this.#t=!1,this.#l(this.#e,this.#h))}}export{t as Events,e as Render,n as Shadow,s as Styles,c as Subscription};
